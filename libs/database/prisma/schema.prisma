generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  password          String
  name              String
  avatarUrl         String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  subscriptions     Subscription[]
  readArticles      ReadArticle[]
  preferences       UserPreference?
  bookmarks         Bookmark[]
  trays             Tray[]
  searchHistory     SearchHistory[]
}

model Source {
  id                String            @id @default(cuid())
  name              String
  url               String            @unique
  feedUrl           String?
  tier              Int               @default(3) // 1-4 based on source reliability
  category          String            // tech, business, etc.
  language          String            @default("ja")
  isActive          Boolean           @default(true)
  lastFetchedAt     DateTime?
  lastError         String?
  lastErrorAt       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  articles          Article[]
  subscriptions     Subscription[]
  sourceTier        SourceTier?
  reliabilityHistory SourceReliabilityHistory[]
}

model Article {
  id                String            @id @default(cuid())
  sourceId          String
  source            Source            @relation(fields: [sourceId], references: [id])
  originalUrl       String            @unique
  title             String
  content           String?
  summary           String?
  aiSummary         String?
  publishedAt       DateTime
  fetchedAt         DateTime          @default(now())
  imageUrl          String?
  author            String?
  readCount         Int               @default(0)
  isArchived        Boolean           @default(false)
  tags              Tag[]
  readArticles      ReadArticle[]
  bookmarks         Bookmark[]
  trayItems         TrayItem[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([sourceId])
  @@index([publishedAt])
}

model Tag {
  id                String            @id @default(cuid())
  name              String            @unique
  articles          Article[]
  userPreferences   UserPreference[]
  createdAt         DateTime          @default(now())
}

model Subscription {
  id                String            @id @default(cuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  sourceId          String
  source            Source            @relation(fields: [sourceId], references: [id])
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@unique([userId, sourceId])
}

model ReadArticle {
  id                String            @id @default(cuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  articleId         String
  article           Article           @relation(fields: [articleId], references: [id])
  readAt            DateTime          @default(now())
  readDuration      Int?              // in seconds

  @@unique([userId, articleId])
}

model UserPreference {
  id                String            @id @default(cuid())
  userId            String            @unique
  user              User              @relation(fields: [userId], references: [id])
  preferredTags     Tag[]
  minTier           Int               @default(1)
  maxTier           Int               @default(4)
  languages         String[]          @default(["ja"])
  emailDigest       Boolean           @default(false)
  digestFrequency   String?           // daily, weekly
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Bookmark {
  id                String            @id @default(cuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId         String
  article           Article           @relation(fields: [articleId], references: [id], onDelete: Cascade)
  note              String?
  createdAt         DateTime          @default(now())

  @@unique([userId, articleId])
}

// Tier判定システム関連のモデル
model SourceTier {
  id                 String    @id @default(cuid())
  sourceId           String    @unique
  tier               Int
  confidence         Float
  verificationStatus String
  reasoning          Json      @default("[]")
  verifiedAt         DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  source Source @relation(fields: [sourceId], references: [id], onDelete: Cascade)
}

model TrustedDomain {
  id           String   @id @default(cuid())
  domain       String   @unique
  organization String
  tier         Int
  category     String?
  verified     Boolean  @default(false)
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerifiedAccount {
  id           String    @id @default(cuid())
  platform     String
  accountId    String
  accountName  String
  personName   String?
  title        String?
  organization String?
  tier         Int
  verifiedAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([platform, accountId])
}

model SourceReliabilityHistory {
  id                    String    @id @default(cuid())
  sourceId              String
  accuracyScore         Float?
  correctionCount       Int       @default(0)
  falseInfoCount        Int       @default(0)
  evaluationPeriodStart DateTime?
  evaluationPeriodEnd   DateTime?
  createdAt             DateTime  @default(now())

  source Source @relation(fields: [sourceId], references: [id], onDelete: Cascade)
}

// Tray（保存ボード）システム
model Tray {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  isPublic    Boolean    @default(false)
  items       TrayItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
  @@index([isPublic])
}

model TrayItem {
  id        String   @id @default(cuid())
  trayId    String
  tray      Tray     @relation(fields: [trayId], references: [id], onDelete: Cascade)
  articleId String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  note      String?
  addedAt   DateTime @default(now())

  @@unique([trayId, articleId])
  @@index([trayId])
  @@index([articleId])
}

// 検索履歴
model SearchHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  query     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
}